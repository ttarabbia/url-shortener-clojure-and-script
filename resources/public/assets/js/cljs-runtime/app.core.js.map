{"version":3,"sources":["app/core.cljs"],"mappings":";;AAOA,AAAA;AAAA;;;oBAAA,iBAAAA,WAAA,mCAAAC,qBAAAC,xGAAOS;AAAP,AAAA,IAAAR,aAAA,mFAAA,AAAAC,8BAAAH,sBAAAC;IAAAG,aAAA,AAAAC,4CAAAH,WAAA,IAAA;IAAAE,iBAAA,AAAAE,4BAAAF;WAAA,AAAAG,4CAAAH,eAAA,lEAEWO;AAFX,AAAA;oHAI6BA,pHA6JxB,OAAA,AAAAoB,qCAAA,MAAA,KAAA,UAAA,AAAA,AAAAA,qCAAA,SAAA,WAAA;;AAjKL,AAAA,GAAA,AAAAvB;AAAA,IAAAC,WAAAV;AAAA,AAAA,CAAA,AAAAU,uBAAA;;AAAAA;;AAAAV;;;;AAAA;AAAA;AAAOW,AAMP,AAAA;AAAA,eAAA,iBAAAE,WAAA,8BAAAZ,qBAAAC,9FAAOc;AAAP,AAAA,IAAAF,aAAA,mFAAA,AAAAV,8BAAAH,sBAAAC;AAAA,AAAA;AACE,IAAAe,aAAwB,sBAAA,2CAAA,qDAAA,tHAACG;YAAzB,AAAAd,4CAAAW,WAAA,IAAA,nEAAOC;gBAAP,AAAAZ,4CAAAW,WAAA,IAAA,vEAAaE;AAAb,uJAIOR,uDAAgB,AAAA,mFAAOO,/KA8BzB,AAAA,AAAAc,uDAAA,iBAAAC,WAAA,EAAA,vMAwHF,OAAA,AAAAD,qCAAA,MAAA,KAAA,AAAA,AAAAA,qCAAA,KAAA,KAAA;AAxHE,AAAAC;uHA7BgB,AAAA,mFAAOf,pMAgJzB,AAAA,AAAAc,qCAAA,QAAA,iBAAAE,WAAA,EAAA,QAAA,AAAAC,yHAAA,WAAA,WAAAV;AA/IuB,IAAAJ,WAAWG,fA+IlC;IA/IuBF,WAAA;IAAAC,WAAuB,AAAA,AAAAE;AAAvB,AAAA,0FAAAJ,SAAAC,SAAAC,gCAAAF,SAAAC,SAAAC,tJAACJ,0CAAAA,sEAAAA;;AA+IxB,AAAAe;;;AAtJL,AAAA,GAAA,AAAAzB;AAAA,IAAAM,WAAAF;AAAA,AAAA,CAAA,AAAAE,uBAAA;;AAAAA;;AAAAF;;;;AAAA;AAAA;AAAOG,AAUP,GAAA,QAAAU,gCAAAC,qCAAAC;AAAA;AAAA,AAAA,AAASC,gBAAK,AAACC,gDAAgB,wBAAA,xBAACC;;AAChC,AAASF,0DAAQb,rCAgCJ,AAAA,AAAAgB,kDAAA","names":["G__32152","props__31070__auto__","maybe-ref__31071__auto__","vec__32153","helix.core/extract-cljs-props","map__32156","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","goog/DEBUG","G__32157","app.core/greeting","name","G__32160","vec__32161","G__32174","app.core/app","vec__32164","state","set-state","helix.hooks/use-state","G__32171","G__32172","G__32173","cljs.core/assoc","p1__32158#","js/app","js/app.core","js/app.core.root","app.core/root","js/module$node_modules$react_dom$client.createRoot","js/document.getElementById","helix.core/get-react","obj32168","obj32170","helix.impl.props/or-undefined"],"sourcesContent":["(ns app.core\n  (:require [helix.core :refer [defnc $]]\n            [helix.hooks :as hooks]\n            [helix.dom :as d]\n            [\"react-dom/client\" :as rdom]))\n\n;; define components using the `defnc` macro\n(defnc greeting\n  \"A component which greets a user.\"\n  [{:keys [name]}]\n  ;; use helix.dom to create DOM elements\n  (d/div \"Hello, \" (d/strong name) \"!\"))\n\n(defnc app []\n  (let [[state set-state] (hooks/use-state {:name \"Helix User\"})]\n    (d/div\n     (d/h1 \"Welcome!\")\n      ;; create elements out of components\n      ($ greeting {:name (:name state)})\n      (d/input {:value (:name state)\n                :on-change #(set-state assoc :name (.. % -target -value))}))))\n\n;; start your app with your favorite React renderer\n(defonce root (rdom/createRoot (js/document.getElementById \"app\")))\n(.render root ($ app))"]}